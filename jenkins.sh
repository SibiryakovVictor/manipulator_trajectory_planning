#!/bin/bash

# this script does the following:
# cd to current dir and create subdir temp
# checkout all branches of project_template separately 
# rebuild each of them from scratch
# push all of them to dedicated repo

# all of the repository paths are local to the server, to avoid unnecessary traffic, so THEY ARE HARDCODED!

# takes one argument - branch name
function build_repo_for_single_branch {
    echo $PWD
    echo $1
	
	if [[ $1 == *"ticket"* ]]; then
		return 0
	fi
	
    git clone -b $1 --single-branch  /d/git/EmbeddedLibs/project_template_develop.git project_template_$1
    cd project_template_$1

    # this will remove all subtrees
    git log | grep git-subtree-dir | tr -d ' ' | cut -d ":" -f2 | sort | uniq | xargs -I {} '/c/Program Files/Git/usr/bin/bash' -c 'if [ -d $(git rev-parse --show-toplevel)/{} ] ; then rm -rf {}; fi'
	
	wait
	
    while true
	do
		if rm -rf .git ; then
			break
		fi
		sleep 1
	done
	
    git init
	
	git config user.name "Jenkins"
	git config user.email "jenkins@dep111.rtc.local"
	
    git add -A
    git commit -m "First autogenerated commit with no subtrees" 
    git branch $1
    git checkout $1 
    git branch -d master 
    sed 's/git subtree pull/git subtree add/' ./subtrees.sh | sed 's#http://gitblit.dep111.rtc.local/r/#/d/git/#' > trees.sh
    ./trees.sh
    # rm trees.sh
    cd ..
}

cd "$( cd "$(dirname "$0")" ; pwd -P )"
mkdir ____test
cd ____test

# get the list of all remote branches
git init test && cd test
git remote add origin  /d/git/EmbeddedLibs/project_template_develop.git 
readarray -t remote_branches <<< "$(git ls-remote --heads origin | sed 's#^\w*\s*refs/heads/##')"

cd ..
rm -rf test

# build clean repo for each branch
for i in "${remote_branches[@]}"
do
   build_repo_for_single_branch "$i"
done


#### glue them back together

# get list of dirs in the current dir, with full path
readarray -t array <<< "$(find `pwd` -maxdepth 1 -type d -name [^\.]\* | sed 's:^\./::')"

# pick the first one
cd "${array[1]}" 

# fetch all of the rest into it and checkout their remote branch
for i in "${array[@]:2}"
do
   git remote add temp "$i"
   git fetch temp
   BRANCH="$(git for-each-ref --format='%(refname:strip=3)' refs/remotes/temp)"
   git checkout "$BRANCH"
   git remote remove temp
done

#push our result
git push --force --mirror /d/git/EmbeddedLibs/project_template.git

# clean up
cd ..

for i in "${array[@]:1}"
do
   rm -rf "$i"
done





